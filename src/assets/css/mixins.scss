// MIXINS - @author Asep Fajar Nugraha <kucaykojek@gmail.com>

// Prefix
$prefix-list: ( webkit, moz, ms, o );

@mixin prefix($property, $value) {
  -webkit-appearance: none;

  @each $prefix in $prefix-list {
    #{'-' + $prefix + '-' + $property}: $value;
  }

  #{$property}: $value;
}

@mixin noselect() {
  -webkit-touch-callout: none; /* iOS Safari */
    -webkit-user-select: none; /* Safari */
     -khtml-user-select: none; /* Konqueror HTML */
       -moz-user-select: none; /* Old versions of Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
            user-select: none; /* Non-prefixed version, currently
                                  supported by Chrome, Edge, Opera and Firefox */
}

// Font Ubuntu Mono
@mixin ubuntu-mono-700 {
  font-family: 'Ubuntu Mono', $font-family;
}

// Clearfix
@mixin clearfix {
  &::before,
  &::after {
    content: " ";
    display: table;
  }
  &::after { clear: both; }
}

// Ellipsis
@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  word-wrap: break-word;
  white-space: nowrap;
}

@function ellipsis-height($text-size, $line, $line-height) {
  @return ($text-size * $line * $line-height);
}

// Font Icon
@mixin font-icon {
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;

  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// Gradient
@mixin background-gradient($start-color, $end-color) {
  background: $start-color;
  background: -moz-linear-gradient(45deg, $start-color 0%, $end-color 100%);
  background: -webkit-linear-gradient(45deg, $start-color 0%, $end-color 100%);
  background: linear-gradient(45deg, $start-color 0%, $end-color 100%);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#{$start-color}",endColorstr="#{$end-color}",GradientType=1);
}

@function checkmark($color) {
  $start: '<svg width="16px" height="16px" viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">';
  $content:'<path fill="#{$color}" d="M7.07 12l-3.8-3.22 1-1.14L6.93 10l5-5.47 1.1 1z" fill-rule="evenodd"/>';
  $end: '</svg>';

  @return svg-encode("#{$start}#{$content}#{$end}");
}

@function indeterminate($color) {
  $start: '<svg width="16px" height="16px" viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">';
  $content:'<rect fill="#{$color}" x="3" y="7" width="10" height="2" rx="1" fill-rule="evenodd"/>';
  $end: '</svg>';

  @return svg-encode("#{$start}#{$content}#{$end}");
}

// Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @return if($index,
      str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index +
      str-length($search)), $search, $replace),
      $string);
}

@function svg-encode($svg){
  // Chunk up string in order to avoid "stack level too deep" error
  $encoded:'';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
      $chunk: str-slice($svg, $index, $index + $slice - 1);
      // Encode
      $chunk: str-replace($chunk, '"', '\'');
      $chunk: str-replace($chunk, '%', '%25');
      $chunk: str-replace($chunk, '#', '%23');
      $chunk: str-replace($chunk, '{', '%7B');
      $chunk: str-replace($chunk, '}', '%7D');
      $chunk: str-replace($chunk, '<', '%3C');
      $chunk: str-replace($chunk, '>', '%3E');

      $encoded: #{$encoded}#{$chunk};
      $index: $index + $slice;
  }
  @return "data:image/svg+xml,#{$encoded}";
}
